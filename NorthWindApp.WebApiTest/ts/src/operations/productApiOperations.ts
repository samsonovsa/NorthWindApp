/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/productApiOperationsMappers";
import * as Parameters from "../models/parameters";
import { MyTitleContext } from "../myTitleContext";

/** Class representing a ProductApiOperations. */
export class ProductApiOperations {
  private readonly client: MyTitleContext;

  /**
   * Create a ProductApiOperations.
   * @param {MyTitleContext} client Reference to the service client.
   */
  constructor(client: MyTitleContext) {
    this.client = client;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.ProductApiGetResponse>
   */
  get(options?: msRest.RequestOptionsBase): Promise<Models.ProductApiGetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: msRest.ServiceCallback<Models.ProblemDetails>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProblemDetails>): void;
  get(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProblemDetails>, callback?: msRest.ServiceCallback<Models.ProblemDetails>): Promise<Models.ProductApiGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ProductApiGetResponse>;
  }

  /**
   * @param productApi
   * @param [options] The optional parameters
   * @returns Promise<Models.ProductApiCreateResponse>
   */
  create(productApi: Models.ProductApi, options?: msRest.RequestOptionsBase): Promise<Models.ProductApiCreateResponse>;
  /**
   * @param productApi
   * @param callback The callback
   */
  create(productApi: Models.ProductApi, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param productApi
   * @param options The optional parameters
   * @param callback The callback
   */
  create(productApi: Models.ProductApi, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  create(productApi: Models.ProductApi, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ProductApiCreateResponse> {
    return this.client.sendOperationRequest(
      {
        productApi,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.ProductApiCreateResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProductApiGet2Response>
   */
  get2(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProductApiGet2Response>;
  /**
   * @param id
   * @param callback The callback
   */
  get2(id: number, callback: msRest.ServiceCallback<Models.ProblemDetails>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  get2(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProblemDetails>): void;
  get2(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProblemDetails>, callback?: msRest.ServiceCallback<Models.ProblemDetails>): Promise<Models.ProductApiGet2Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      get2OperationSpec,
      callback) as Promise<Models.ProductApiGet2Response>;
  }

  /**
   * @param id
   * @param productApi
   * @param [options] The optional parameters
   * @returns Promise<Models.ProductApiUpdateResponse>
   */
  update(id: number, productApi: Models.ProductApi, options?: msRest.RequestOptionsBase): Promise<Models.ProductApiUpdateResponse>;
  /**
   * @param id
   * @param productApi
   * @param callback The callback
   */
  update(id: number, productApi: Models.ProductApi, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param productApi
   * @param options The optional parameters
   * @param callback The callback
   */
  update(id: number, productApi: Models.ProductApi, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  update(id: number, productApi: Models.ProductApi, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ProductApiUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        productApi,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ProductApiUpdateResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProductApiDeleteMethodResponse>
   */
  deleteMethod(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProductApiDeleteMethodResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  deleteMethod(id: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ProductApiDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.ProductApiDeleteMethodResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/product",
  responses: {
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/product",
  requestBody: {
    parameterPath: "productApi",
    mapper: {
      ...Mappers.ProductApi,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {}
  },
  serializer
};

const get2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/product/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/product/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "productApi",
    mapper: {
      ...Mappers.ProductApi,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/product/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {}
  },
  serializer
};
